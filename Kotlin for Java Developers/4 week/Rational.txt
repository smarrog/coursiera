package rationals

import java.lang.IllegalArgumentException
import java.math.BigInteger

fun gcd(a: BigInteger, b: BigInteger): BigInteger = if (b == BigInteger.ZERO) a else gcd(b, a % b)

class Rational(private var n: BigInteger, private var d: BigInteger)
    : Comparable<Rational> {
    init {
        if (d == BigInteger.ZERO) {
            throw IllegalArgumentException()
        }
        optimize()
    }

    operator fun plus(other: Rational) = (n * other.d + other.n * d) divBy (d * other.d)

    operator fun minus(other: Rational) = (n * other.d - other.n * d) divBy (d * other.d)

    operator fun times(other: Rational) = (n * other.n) divBy (d * other.d)

    operator fun div(other: Rational) = (n * other.d) divBy (d * other.n)

    operator fun unaryMinus() = -n divBy d

    override fun compareTo(other: Rational): Int = (n * other.d).compareTo(other.n * d)

    override fun equals(other: Any?): Boolean {
        if (other is Rational) {
            return n == other.n && d == other.d
        }
        return false
    }

    override fun toString(): String {
        return when (d) {
            BigInteger.ONE -> n.toString()
            else -> "$n/$d"
        }
    }

    private fun optimize() {
        val gcd = gcd(n, d)
        n /= gcd
        d /= gcd
        if (d < BigInteger.ZERO) {
            n = -n
            d = -d
        }
    }
}

infix fun Int.divBy(d: Int) = Rational(toBigInteger(), d.toBigInteger())
infix fun Long.divBy(d: Long) = Rational(toBigInteger(), d.toBigInteger())
infix fun BigInteger.divBy(d: BigInteger) = Rational(this, d)

fun String.toRational() : Rational {
    val separated = split('/')
    return when (separated.size) {
        1 -> Rational(separated[0].toBigInteger(), 1.toBigInteger())
        else -> Rational(separated[0].toBigInteger(), separated[1].toBigInteger())
    }
}


fun main() {
    val half = 1 divBy 2
    val third = 1 divBy 3

    val sum: Rational = half + third
    println(5 divBy 6 == sum)

    val difference: Rational = half - third
    println(1 divBy 6 == difference)

    val product: Rational = half * third
    println(1 divBy 6 == product)

    val quotient: Rational = half / third
    println(3 divBy 2 == quotient)

    val negation: Rational = -half
    println(-1 divBy 2 == negation)

    println((2 divBy 1).toString() == "2")
    println((-2 divBy 4).toString() == "-1/2")
    println("117/1098".toRational().toString() == "13/122")

    val twoThirds = 2 divBy 3
    println(half < twoThirds)

    println(half in third..twoThirds)

    println(2000000000L divBy 4000000000L == 1 divBy 2)

    println("912016490186296920119201192141970416029".toBigInteger() divBy
            "1824032980372593840238402384283940832058".toBigInteger() == 1 divBy 2)
}