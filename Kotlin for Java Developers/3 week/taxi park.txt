package taxipark

/*
 * Task #1. Find all the drivers who performed no trips.
 */
fun TaxiPark.findFakeDrivers(): Set<Driver> =
    allDrivers.filter { driver ->
        trips.none{ it.driver == driver }
    }.toSet()
/*
 * Task #2. Find all the clients who completed at least the given number of trips.
 */
fun TaxiPark.findFaithfulPassengers(minTrips: Int): Set<Passenger> =
    allPassengers.filter { passenger ->
        trips.count{ trip ->
            trip.passengers.any{it == passenger}
        } >= minTrips
    }.toSet()

/*
 * Task #3. Find all the passengers, who were taken by a given driver more than once.
 */
fun TaxiPark.findFrequentPassengers(driver: Driver): Set<Passenger> =
    allPassengers.filter { passenger ->
        trips.count{trip ->
            trip.driver == driver && trip.passengers.any{ it == passenger }
        } > 1
    }.toSet()

/*
 * Task #4. Find the passengers who had a discount for majority of their trips.
 */
fun TaxiPark.findSmartPassengers(): Set<Passenger> =
    allPassengers.filter { passenger ->
        val divided = trips.filter{trip ->
            trip.passengers.any{ it == passenger }
        }.partition { it.discount != null }
        divided.first.size > divided.second.size
    }.toSet()

/*
 * Task #5. Find the most frequent trip duration among minute periods 0..9, 10..19, 20..29, and so on.
 * Return any period if many are the most frequent, return `null` if there're no trips.
 */
fun TaxiPark.findTheMostFrequentTripDurationPeriod(): IntRange? {
    val key = trips.map { it.duration }
        .groupBy { it / 10 }
        .maxBy { (_, durations) -> durations.size }?.key
    return if (key != null)
        IntRange(key * 10, key * 10 + 9)
    else
        null
}

/*
 * Task #6.
 * Check whether 20% of the drivers contribute 80% of the income.
 */
fun TaxiPark.checkParetoPrinciple(): Boolean {
    if (trips.isEmpty())
        return false
    val sorted = trips.groupBy { it.driver }
        .mapValues { (_, trips) -> trips.sumByDouble { it.cost } }
        .entries
        .sortedByDescending { it.value }

    return sorted.take((allDrivers.size * 0.2).toInt()).sumByDouble { it.value } >=
            trips.sumByDouble { it.cost } * 0.8
}